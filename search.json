[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Functional Programming Notes",
    "section": "",
    "text": "Preface\nThis is a Quarto book.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee for additional discussion of literate programming.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "logo/intro.html",
    "href": "logo/intro.html",
    "title": "2  Introduction to Logo",
    "section": "",
    "text": "2.1 Basic Notions",
    "crumbs": [
      "Logo",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to Logo</span>"
    ]
  },
  {
    "objectID": "logo/intro.html#basic-notions",
    "href": "logo/intro.html#basic-notions",
    "title": "2  Introduction to Logo",
    "section": "",
    "text": "2.1.1 Words and Lists\nBasic building blocks of logo programs are words. Everything in logo is a word. By default logo interprets a word as a name of a procedure and tries to carry it out. Examples of procedures are sum, print. We will define procedures more carefully below.\nIn order for a word to be interpreted as itself, and not as a name of a procedure it must be escaped.\nE.g.\nprint hello\nwill not print hello, but will try interpret hello as a name of a procedure, and output and error. A word is escaped by prepending it with a quote like this: \"hello. For this reason escaping is also called quoting.\nSo\nprint \"hello\nwill print hello.\nNumeric words are automatically escaped. That is, print 2 and print \"2 are the same. It makes sense since procedure names can not be numbers, so numbers are automatically understood to evaluate to themselves.\nList is simply a combination of multiple words. All logo programs are lists. Logo evaluates a list by evaluating the procedures contained in the list. e.g.\nprint sum 3 2\nJust as words can be escaped, so can be lists. In that case logo will not try to evaluate the list and carry out the computation, rather the list will be evaluated to itself. Lists are escaped by enclosing them in square brackets. e.g.\n[print sum 3 2]\nwill not print 5. It is simply the list itself. Note that this is not a complete logo instruction. (We will carefully define what an instruction is below). The print procedure is flexible and accepts not only words but also (escaped) lists. So we can supply the above list to it.:\nprint [print sum 3 2]\nThis will print print sum 3 2\nEscaped words or escaped lists that evaluate to themselves are called data.\nLists are very flexible and can contain different sorts of data, including other lists:\n[[1 apple] 2 [banana 15 cherry]]\nAbove list contains two lists and one number. It is a nested list. A list that is not nested, like [banana 15 cherry] is called a flat list of a sentence.\nThis is different to many other languages, where lists usually must contain objects or data of the same type.\n\n\n2.1.2 Procedures and Instructions\nprocedures are programs that carry out computations. e.g. print, sum are names of procedures. In conventional programming languages there are many forms of statements that achieve certain things, like assignment statement, if statement, while statement, all having their unique syntax rules. In lisp-like languages this is much simpler. There is only one type of statement: procedure invocation.\nA procedure is a name of a program, not a concrete instance of it. To carry out a concrete computation, a procedure must be supplied with information (data). Doing this is called invoking a procedure. E.g. sum 3 2, print 10. Different procedures accept different number of data. E.g. sum expects two words, while print expects a single one.\nThere are two type of procedures:\n\ncommands: commands have effects when invoked. Effects change something in the state of the computer, e.g. print\noperations: operations return values / data when invoked. They do not change the state of the computer. e.g. sum. Another way to say is that operations are evaluated when invoked.\n\nsince operations return values, they can be used in place of data as an input to a procedure. We saw it with print:\nprint sum 3 2\nSince invoked operations are values, they can be supplied to operations as inputs. This can be done indefinitely and such combinations are called expressions. More formally expression are defined inductively as follows:\n\ndata are expressions.\nif an operation op expects n inputs, and e1,..., en are expressions. Then op e1 ... en is an expression.\n\nAn instruction is invocation of one or more procedures. E.g. print sum 3 2 or print 10. More formally an instruction is a list, where the first word is a command and the rest of the words are expressions that evaluate to inputs necessary to carry out the command. E.g.:\nprint sum 3 2\nprint is a command and it expects single datum. sum 3 2 is an expression evaluating to 5, which in turn is passed to print as input.\nA procedure is described (specified) by the following:see 1\n\nIs it a command or an operation?\nHow many inputs does it accept?\nWhat are the types of each of the inputs? (word, list or array)?\nIf the procedure is an operation, what is the output? (Its description and type) If the procedure is a command what is the effect? (The description of the effect) .\n\n\n\n2.1.3 Manipulating Words and Lists\n\n\n2.1.4 References\n\n\n1. Harvey, B. Computer Science\nLogo Style: Volume 3. (MIT Press,\nCambridge, Mass, 1997).",
    "crumbs": [
      "Logo",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to Logo</span>"
    ]
  }
]