@book{harveyComputerScienceLogo1997,
  title = {Computer Science {{Logo}} Style: {{Volume}} 3},
  shorttitle = {Computer Science {{Logo}} Style},
  author = {Harvey, Brian},
  date = {1997},
  edition = {2nd ed},
  publisher = {MIT Press},
  location = {Cambridge, Mass},
  abstract = {This series is for people--adults and teenagers--who are interested in computer programming because it's fun. The three volumes use the Logo programming language as the vehicle for an exploration of computer science from the perspective of symbolic computation and artificial intelligence. Logo is a dialect of Lisp, a language used in the most advanced research projects in computer science, especially in artificial intelligence. Throughout the series, functional programming techniques (including higher order functions and recursion) are emphasized, but traditional sequential programming is also used when appropriate.In the second edition, the first two volumes have been rearranged so that illustrative case studies appear with the techniques they demonstrate. Volume 1 includes a new chapter about higher order functions, and the recursion chapters have been reorganized for greater clarity. Volume 2 includes a new tutorial chapter about macros, an exclusive capability of Berkeley Logo, and two new projects. Throughout the series, the larger program examples have been rewritten for greater readability by more extensive use of data abstraction.In Volume 3 "Beyond Programming", the reader learns that computer science includes not justprogramming computers, but also more formal ways to think about computing, such as automata theory and discrete mathematics. In contrast to most books on those subjects, this volume presents the ideas in the form of concrete, usable computer programs rather than as abstract proofs. Examples include a program to translate from the declarative Regular Expression formalism into the executable Finite State Machine notation, and a Pascal compiler written in Logo.The Logo programs in these books and the author's free Berkeley Logo interpreter are available via the Internet or on diskette},
  isbn = {978-0-262-58148-6 978-0-262-28681-7 978-0-262-28682-4 978-0-262-28683-1},
  langid = {english},
  pagetotal = {1},
  keywords = {logo}
}

@book{harveyComputerScienceLogo1997a,
  title = {Computer {{Science Logo Style}}: {{Symbolic}} Computing},
  shorttitle = {Computer {{Science Logo Style}}},
  author = {Harvey, Brian},
  date = {1997},
  eprint = {BmuqURW0G5UC},
  eprinttype = {googlebooks},
  publisher = {MIT Press},
  abstract = {This series is for people--adults and teenagers--who are interested in computer programming because it's fun. The three volumes use the Logo programming language as the vehicle for an exploration of computer science from the perspective of symbolic computation and artificial intelligence. Logo is a dialect of Lisp, a language used in the most advanced research projects in computer science, especially in artificial intelligence. Throughout the series, functional programming techniques (including higher order functions and recursion) are emphasized, but traditional sequential programming is also used when appropriate. In the second edition, the first two volumes have been rearranged so that illustrative case studies appear with the techniques they demonstrate. Volume 1 includes a new chapter about higher order functions, and the recursion chapters have been reorganized for greater clarity. Volume 2 includes a new tutorial chapter about macros, an exclusive capability of Berkeley Logo, and two new projects. Throughout the series, the larger program examples have been rewritten for greater readability by more extensive use of data abstraction. In Volume 3 "Beyond Programming", the reader learns that computer science includes not justprogramming computers, but also more formal ways to think about computing, such as automata theory and discrete mathematics. In contrast to most books on those subjects, this volume presents the ideas in the form of concrete, usable computer programs rather than as abstract proofs. Examples include a program to translate from the declarative Regular Expression formalism into the executable Finite State Machine notation, and a Pascal compiler written in Logo. The Logo programs in these books and the author's free Berkeley Logo interpreter are available via the Internet or on diskette.},
  isbn = {978-0-262-58148-6},
  langid = {english},
  pagetotal = {348},
  keywords = {Computer Science}
}
